# services/integrated_visual_service.py
import asyncio
import os
import logging
from typing import List, Tuple
from PIL import Image, ImageDraw, ImageFont
import io

from services.imagen_service import ImagenService
from services.gemini_service import GeminiService
from models.schemas import VisualPanel, VisualStyle, ImageGenerationStatus
from utils.config import settings

logger = logging.getLogger(__name__)

class IntegratedVisualService:
    def __init__(self):
        logger.info("Initializing Integrated Visual Service...")
        self.imagen_service = ImagenService()
        self.gemini_service = GeminiService()
        logger.info("Successfully initialized Integrated Visual Service")
    
    async def create_storyboard(self, prompt: str, style: VisualStyle, 
                               panels_count: int, task_id: str) -> Tuple[List[VisualPanel], List[str], dict]:
        """
        Create complete storyboard with Gemini + Imagen v4
        Returns: (panels, image_paths, generation_stats)
        """
        logger.info(f"Creating storyboard - Task: {task_id}, Panels: {panels_count}, Style: {style.value}")
        
        generation_stats = {
            "total_panels": panels_count,
            "successful_generations": 0,
            "failed_generations": 0,
            "fallback_generations": 0,
            "start_time": asyncio.get_event_loop().time()
        }
        
        try:
            # Step 1: Generate storyboard structure with Gemini
            logger.info("Step 1: Generating storyboard structure...")
            panels = await self.gemini_service.generate_visual_storyboard(prompt, style, panels_count)
            
            if not panels:
                logger.error("No panels generated by Gemini")
                return [], [], generation_stats
            
            logger.info(f"Generated {len(panels)} panels")
            
            # Step 2: Generate images for each panel with Imagen v4
            logger.info("Step 2: Generating images with Imagen v4...")
            image_paths = []
            
            # Process panels concurrently (but limit concurrency to avoid rate limits)
            semaphore = asyncio.Semaphore(2)  # Max 2 concurrent image generations
            
            async def generate_panel_with_semaphore(panel):
                async with semaphore:
                    return await self._generate_panel_image_with_fallback(panel, style, task_id)
            
            # Generate all images
            generation_results = await asyncio.gather(
                *[generate_panel_with_semaphore(panel) for panel in panels],
                return_exceptions=True
            )
            
            # Process results
            for i, result in enumerate(generation_results):
                if isinstance(result, Exception):
                    logger.error(f"Panel {i+1} generation failed with exception: {result}")
                    generation_stats["failed_generations"] += 1
                    image_paths.append(None)
                else:
                    image_path, status = result
                    if image_path:
                        image_paths.append(image_path)
                        generation_stats["successful_generations"] += 1
                        logger.info(f"Panel {i+1} generated successfully: {status}")
                    else:
                        image_paths.append(None)
                        generation_stats["failed_generations"] += 1
                        logger.error(f"Panel {i+1} generation failed: {status}")
            
            # Filter out None values and get corresponding panels
            valid_results = [(panel, path) for panel, path in zip(panels, image_paths) if path is not None]
            
            if valid_results:
                final_panels, final_paths = zip(*valid_results)
                generation_stats["end_time"] = asyncio.get_event_loop().time()
                generation_stats["total_time"] = generation_stats["end_time"] - generation_stats["start_time"]
                
                logger.info(f"Storyboard creation completed: {len(final_paths)}/{len(panels)} panels successful")
                return list(final_panels), list(final_paths), generation_stats
            else:
                logger.error("No panels were successfully generated")
                return [], [], generation_stats
                
        except Exception as e:
            logger.error(f"Error in storyboard creation: {e}")
            generation_stats["end_time"] = asyncio.get_event_loop().time()
            return [], [], generation_stats
    
    async def _generate_panel_image_with_fallback(self, panel: VisualPanel, 
                                                 style: VisualStyle, task_id: str) -> Tuple[str, str]:
        """Generate panel image with fallback to text-based generation"""
        
        try:
            # Try Imagen v4 first
            logger.info(f"Attempting Imagen v4 generation for panel {panel.sequence}")
            image_path, status = await self.imagen_service.generate_panel_image(panel, style, task_id)
            
            if image_path and os.path.exists(image_path):
                logger.info(f"Imagen v4 successful for panel {panel.sequence}")
                return image_path, f"Generated with Imagen v4: {status}"
            else:
                logger.warning(f"Imagen v4 failed for panel {panel.sequence}, trying fallback")
                
        except Exception as e:
            logger.error(f"Imagen v4 error for panel {panel.sequence}: {e}")
        
        # Fallback to text-based generation
        try:
            logger.info(f"Using fallback generation for panel {panel.sequence}")
            fallback_path = await self._create_fallback_panel(panel, style, task_id)
            return fallback_path, "Generated with fallback method"
            
        except Exception as e:
            logger.error(f"Fallback generation failed for panel {panel.sequence}: {e}")
            return None, f"All generation methods failed: {e}"
    
    async def _create_fallback_panel(self, panel: VisualPanel, style: VisualStyle, task_id: str) -> str:
        """Create fallback panel with text and basic graphics"""
        
        logger.info(f"Creating fallback panel {panel.sequence}")
        
        # Create basic text-based panel
        img = Image.new("RGB", (1200, 800), "white")
        draw = ImageDraw.Draw(img)
        
        # Load fonts
        try:
            title_font = ImageFont.truetype("arial.ttf", 36)
            text_font = ImageFont.truetype("arial.ttf", 24)
        except:
            title_font = ImageFont.load_default()
            text_font = ImageFont.load_default()
        
        # Draw title
        title_bbox = draw.textbbox((0, 0), panel.title, font=title_font)
        title_width = title_bbox - title_bbox
        title_x = (1200 - title_width) // 2
        draw.text((title_x, 50), panel.title, fill="black", font=title_font)
        
        # Draw description
        desc_lines = self._wrap_text(panel.description, 80)
        y_pos = 150
        for line in desc_lines:
            line_bbox = draw.textbbox((0, 0), line, font=text_font)
            line_width = line_bbox - line_bbox
            line_x = (1200 - line_width) // 2
            draw.text((line_x, y_pos), line, fill="gray", font=text_font)
            y_pos += 30
        
        # Draw visual elements list
        y_pos += 50
        draw.text((100, y_pos), "Visual Elements:", fill="blue", font=text_font)
        y_pos += 40
        for element in panel.visual_elements:
            draw.text((120, y_pos), f"-  {element}", fill="blue", font=text_font)
            y_pos += 30
        
        # Draw text content
        y_pos += 50
        content_lines = self._wrap_text(panel.text_content, 80)
        for line in content_lines:
            line_bbox = draw.textbbox((0, 0), line, font=text_font)
            line_width = line_bbox - line_bbox
            line_x = (1200 - line_width) // 2
            draw.text((line_x, y_pos), line, fill="black", font=text_font)
            y_pos += 30
        
        # Save fallback image
        filename = f"{task_id}_panel_{panel.sequence}_fallback.png"
        filepath = os.path.join(settings.IMAGES_DIR, filename)
        img.save(filepath, quality=95)
        
        logger.info(f"Fallback panel saved: {filepath}")
        return filepath
    
    def _wrap_text(self, text: str, width: int) -> List[str]:
        """Wrap text to specified width"""
        words = text.split()
        lines = []
        current_line = []
        current_length = 0
        
        for word in words:
            if current_length + len(word) + 1 <= width:
                current_line.append(word)
                current_length += len(word) + 1
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
                current_length = len(word)
        
        if current_line:
            lines.append(' '.join(current_line))
        
        return lines
